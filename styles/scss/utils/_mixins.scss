//==============================================================================
// General mixins
//==============================================================================





/// Responsive manager
/// @author Hugo Giraudel
/// @access public
/// @group Layout
/// @param {String} $breakpoint - Breakpoint
/// @requires $mvl-breakpoints
/// @example scss - Input (SCSS)
///   $mvl-breakpoints: (
///     'medium': (min-width: 800px),
///     'large': (min-width: 1000px),
///   );
///
///   @include mvl-respond-to('medium') {
///       /* media query specific CSS rules */
///   }
/// @example css - Output (CSS)
///   @media only screen and (min-width: 800px) {
///       /* media query specific CSS rules */
///   }
@mixin mvl-respond-to($breakpoint) {
    $raw-query: map-get($mvl-breakpoints, $breakpoint);

    @if $raw-query {
        $query: if(type-of($raw-query) == 'string', unquote($raw-query), inspect($raw-query));

        @media only screen and #{$query} {
            @content;
        }
    } @else {
        @error 'No value found for `#{$breakpoint}`. '
            + 'Please make sure it is defined in `$mvl-breakpoints` map.';
    }
}





/// Converts font size (input in px) to rem and outputs it.
/// Also outputs corresponding (i. e. a multiple of $mvl-base-line-height) line-height.
/// @access public
/// @group Typography
/// @param {Number} $font-size - font size in px
/// @requires $mvl-base-font-size--screen
/// @requires $mvl-base-line-height
/// @example scss - Input (SCSS)
///     @include mvl-font-size-line-height(20px);
/// @example css - Output (CSS)
///     font-size: 1.1875rem;
///     line-height: 1.31579;
@mixin mvl-font-size-line-height($font-size) {
    @if unit($font-size) != 'px' {
        @error "mvl-font-size-line-height only supports px inputs.";
    }
    $lines: ceil($font-size / $mvl-base-line-height);

    font-size: #{($font-size / $mvl-base-font-size--screen)}rem;
    line-height: (($lines * $mvl-base-line-height) / $font-size);
}





//------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------


/// Helper to clear inner floats
/// @author Nicolas Gallagher
/// @link http://nicolasgallagher.com/micro-clearfix-hack/ Micro Clearfix
/// @group Helpers
/// @access public
@mixin mvl-clearfix {
    &::before,
    &::after {
        display: table;
        content: '';
    }

    &::after {
        clear: both;
    }
}


/// Hide content for image replacement
/// @group Helpers
/// @access public
@mixin mvl-image-replacement {
    overflow: hidden;
    border: 0;
    background-color: transparent;
    *text-indent: -9999px;

    &::before {
        display: block;
        width: 0;
        height: 150%;
        content: '';
    }
}


/// Hide content from both screenreaders and browsers
/// @author Jared Smith
/// @link http://juicystudio.com/article/screen-readers-display-none.php
/// @group Helpers
/// @access public
@mixin mvl-hidden {
    display: none !important;
    visibility: hidden;
}


/// Hide content only visually, but have it available for screenreaders
/// @author Hugo Giraudel
/// @link http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
/// @group Helpers
/// @param {String} $focusable - use the string “focusable” to allow the element to be focusable when navigated to via the keyboard
/// @access public
@mixin mvl-visually-hidden($focusable: null) {
    position: absolute !important;
    overflow: hidden !important;
    clip: rect(1px, 1px, 1px, 1px) !important;
    clip-path: inset(50%) !important;
    width: 1px !important;
    height: 1px !important;
    padding: 0 !important;
    white-space: nowrap !important;
    border: 0 !important;

    @if $focusable == 'focusable' {
        &:active,
        &:focus {
            overflow: visible !important;
            clip: auto !important;
            clip-path: none !important;
            width: auto !important;
            height: auto !important;
            white-space: normal !important;
        }
    }
}
